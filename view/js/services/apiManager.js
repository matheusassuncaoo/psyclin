import { API_CONFIG, buildApiUrl, validateConfig, checkServerHealth } from '../config/apiConfig.js';

// Validar configura√ß√£o na inicializa√ß√£o
validateConfig();

const pacienteEndpoint = buildApiUrl(API_CONFIG.ENDPOINTS.PACIENTES);

async function pegarPacientes(){
    try {
        console.log('üîÑ Fazendo requisi√ß√£o para:', pacienteEndpoint);
        console.log('üîß Configura√ß√£o atual:', {
            baseUrl: API_CONFIG.BASE_URL,
            endpoint: API_CONFIG.ENDPOINTS.PACIENTES,
            urlCompleta: pacienteEndpoint
        });
        
        const response = await fetch(pacienteEndpoint, {
            method: 'GET',
            headers: API_CONFIG.DEFAULT_HEADERS,
            mode: 'cors' // Explicitamente habilitando CORS
        });

        console.log('üì° Resposta recebida:', {
            status: response.status,
            statusText: response.statusText,
            headers: Object.fromEntries(response.headers.entries())
        });

        if (!response.ok) {
            // Tratamento espec√≠fico para diferentes tipos de erro
            if (response.status === 401) {
                throw new Error('‚ùå Erro 401: N√£o autorizado. Verifique se o servidor Spring Boot est√° rodando e se as configura√ß√µes de seguran√ßa est√£o corretas.');
            } else if (response.status === 403) {
                throw new Error('‚ùå Erro 403: Acesso proibido.');
            } else if (response.status === 404) {
                throw new Error('‚ùå Erro 404: Endpoint n√£o encontrado. Verifique se o servidor est√° rodando na porta 5060.');
            } else if (response.status >= 500) {
                throw new Error(`‚ùå Erro do servidor (${response.status}): ${response.statusText}`);
            } else {
                throw new Error(`‚ùå Erro HTTP: ${response.status} - ${response.statusText}`);
            }
        }

        const apiResponse = await response.json();
        console.log('üì° Resposta da API:', apiResponse);
        
        if (apiResponse.success && apiResponse.data) {
            console.log('‚úÖ Pacientes carregados com sucesso:', apiResponse.data.length, 'pacientes encontrados');
            return apiResponse.data;
        } else {
            throw new Error(apiResponse.error || 'Erro desconhecido ao buscar pacientes');
        }
    } catch (error) {
        // Tratamento espec√≠fico para erro de rede
        if (error.name === 'TypeError' && error.message.includes('fetch')) {
            console.error('üåê Erro de conex√£o: Servidor Spring Boot pode estar offline ou rodando em porta diferente');
            throw new Error('‚ùå Erro de conex√£o: Verifique se o servidor Spring Boot est√° rodando na porta 5060');
        }
        
        console.error('üí• Erro ao buscar pacientes:', error);
        throw error;
    }
}

// Fun√ß√£o para buscar apenas pacientes ativos
async function pegarPacientesAtivos(){
    try {
        const endpoint = buildApiUrl(API_CONFIG.ENDPOINTS.PACIENTES + '/ativos');
        console.log('üîÑ Fazendo requisi√ß√£o para pacientes ativos:', endpoint);
        
        const response = await fetch(endpoint, {
            method: 'GET',
            headers: API_CONFIG.DEFAULT_HEADERS,
            mode: 'cors'
        });

        console.log('üì° Resposta recebida:', {
            status: response.status,
            statusText: response.statusText
        });

        if (!response.ok) {
            if (response.status === 401) {
                throw new Error('‚ùå Erro 401: N√£o autorizado.');
            } else if (response.status === 404) {
                throw new Error('‚ùå Erro 404: Endpoint n√£o encontrado.');
            } else {
                throw new Error(`‚ùå Erro HTTP: ${response.status} - ${response.statusText}`);
            }
        }

        const apiResponse = await response.json();
        console.log('üì° Resposta da API:', apiResponse);
        
        if (apiResponse.success && apiResponse.data) {
            console.log('‚úÖ Pacientes ativos carregados com sucesso:', apiResponse.data.length, 'pacientes encontrados');
            return apiResponse.data;
        } else {
            throw new Error(apiResponse.error || 'Erro desconhecido ao buscar pacientes ativos');
        }
    } catch (error) {
        if (error.name === 'TypeError' && error.message.includes('fetch')) {
            console.error('üåê Erro de conex√£o: Servidor Spring Boot pode estar offline');
            throw new Error('‚ùå Erro de conex√£o: Verifique se o servidor Spring Boot est√° rodando na porta 8080');
        }
        
        console.error('üí• Erro ao buscar pacientes ativos:', error);
        throw error;
    }
}

// Fun√ß√£o para contar pacientes ativos
async function contarPacientesAtivos(){
    try {
        const endpoint = buildApiUrl(API_CONFIG.ENDPOINTS.PACIENTES + '/contar-ativos');
        console.log('üîÑ Contando pacientes ativos:', endpoint);
        
        const response = await fetch(endpoint, {
            method: 'GET',
            headers: API_CONFIG.DEFAULT_HEADERS,
            mode: 'cors'
        });

        if (!response.ok) {
            throw new Error(`‚ùå Erro HTTP: ${response.status} - ${response.statusText}`);
        }

        const count = await response.json();
        console.log('‚úÖ Contagem de pacientes ativos:', count);
        return count;
    } catch (error) {
        console.error('üí• Erro ao contar pacientes ativos:', error);
        throw error;
    }
}

// ================================
// FUN√á√ïES PARA PROFISSIONAIS
// ================================

// Fun√ß√£o para buscar todos os profissionais
async function pegarProfissionais(){
    try {
        const endpoint = buildApiUrl(API_CONFIG.ENDPOINTS.PROFISSIONAIS);
        console.log('üîÑ Fazendo requisi√ß√£o para profissionais:', endpoint);
        
        const response = await fetch(endpoint, {
            method: 'GET',
            headers: API_CONFIG.DEFAULT_HEADERS,
            mode: 'cors'
        });

        if (!response.ok) {
            throw new Error(`‚ùå Erro HTTP: ${response.status} - ${response.statusText}`);
        }

        const apiResponse = await response.json();
        console.log('üì° Resposta da API:', apiResponse);
        
        if (apiResponse.success && apiResponse.data) {
            console.log('‚úÖ Profissionais carregados com sucesso:', apiResponse.data.length, 'profissionais encontrados');
            return apiResponse.data;
        } else {
            throw new Error(apiResponse.error || 'Erro desconhecido ao buscar profissionais');
        }
    } catch (error) {
        console.error('üí• Erro ao buscar profissionais:', error);
        throw error;
    }
}

// Fun√ß√£o para buscar apenas profissionais ativos
async function pegarProfissionaisAtivos(){
    try {
        const endpoint = buildApiUrl(API_CONFIG.ENDPOINTS.PROFISSIONAIS + '/ativos');
        console.log('üîÑ Fazendo requisi√ß√£o para profissionais ativos:', endpoint);
        
        const response = await fetch(endpoint, {
            method: 'GET',
            headers: API_CONFIG.DEFAULT_HEADERS,
            mode: 'cors'
        });

        if (!response.ok) {
            throw new Error(`‚ùå Erro HTTP: ${response.status} - ${response.statusText}`);
        }

        const profissionaisAtivos = await response.json();
        console.log('‚úÖ Profissionais ativos carregados com sucesso:', profissionaisAtivos.length, 'profissionais encontrados');
        return profissionaisAtivos;
    } catch (error) {
        console.error('üí• Erro ao buscar profissionais ativos:', error);
        throw error;
    }
}

// Fun√ß√£o para contar profissionais ativos (otimizada para dashboard)
async function contarProfissionaisAtivos(){
    try {
        const endpoint = buildApiUrl(API_CONFIG.ENDPOINTS.PROFISSIONAIS + '/contar-ativos');
        console.log('üîÑ Contando profissionais ativos:', endpoint);
        
        const response = await fetch(endpoint, {
            method: 'GET',
            headers: API_CONFIG.DEFAULT_HEADERS,
            mode: 'cors'
        });

        if (!response.ok) {
            throw new Error(`‚ùå Erro HTTP: ${response.status} - ${response.statusText}`);
        }

        const count = await response.json();
        console.log('‚úÖ Contagem de profissionais ativos:', count);
        return count;
    } catch (error) {
        console.error('üí• Erro ao contar profissionais ativos:', error);
        throw error;
    }
}

// ================================
// FUN√á√ïES PARA ANAMNESES
// ================================

// Fun√ß√£o para buscar todas as anamneses
async function pegarAnamneses(){
    try {
        const endpoint = buildApiUrl(API_CONFIG.ENDPOINTS.ANAMNESES);
        console.log('üîÑ Fazendo requisi√ß√£o para anamneses:', endpoint);
        
        const response = await fetch(endpoint, {
            method: 'GET',
            headers: API_CONFIG.DEFAULT_HEADERS,
            mode: 'cors'
        });

        if (!response.ok) {
            throw new Error(`‚ùå Erro HTTP: ${response.status} - ${response.statusText}`);
        }

        const apiResponse = await response.json();
        if (apiResponse.success) {
            console.log('‚úÖ Anamneses carregadas com sucesso:', apiResponse.data.length, 'anamneses encontradas');
            return apiResponse.data;
        } else {
            throw new Error(apiResponse.error || 'Erro ao carregar anamneses');
        }
    } catch (error) {
        console.error('üí• Erro ao buscar anamneses:', error);
        throw error;
    }
}

// Fun√ß√£o para buscar apenas anamneses ativas (statusFuncional = true)
async function pegarAnamnesesAtivas(){
    try {
        const endpoint = buildApiUrl(API_CONFIG.ENDPOINTS.ANAMNESES + '/ativas');
        console.log('üîÑ Fazendo requisi√ß√£o para anamneses ativas:', endpoint);
        
        const response = await fetch(endpoint, {
            method: 'GET',
            headers: API_CONFIG.DEFAULT_HEADERS,
            mode: 'cors'
        });

        if (!response.ok) {
            throw new Error(`‚ùå Erro HTTP: ${response.status} - ${response.statusText}`);
        }

        const apiResponse = await response.json();
        if (apiResponse.success) {
            console.log('‚úÖ Anamneses ativas carregadas com sucesso:', apiResponse.data.length, 'anamneses encontradas');
            return apiResponse.data;
        } else {
            throw new Error(apiResponse.error || 'Erro ao carregar anamneses ativas');
        }
    } catch (error) {
        console.error('üí• Erro ao buscar anamneses ativas:', error);
        throw error;
    }
}

// Fun√ß√£o para contar anamneses ativas (otimizada para dashboard, sem dados sens√≠veis)
async function contarAnamnesesAtivas(){
    try {
        const endpoint = buildApiUrl(API_CONFIG.ENDPOINTS.ANAMNESES + '/ativas/count');
        console.log('üîÑ Contando anamneses ativas:', endpoint);
        
        const response = await fetch(endpoint, {
            method: 'GET',
            headers: API_CONFIG.DEFAULT_HEADERS,
            mode: 'cors'
        });

        if (!response.ok) {
            throw new Error(`‚ùå Erro HTTP: ${response.status} - ${response.statusText}`);
        }

        const count = await response.json();
        console.log('‚úÖ Contagem de anamneses ativas:', count);
        return count;
    } catch (error) {
        console.error('üí• Erro ao contar anamneses ativas:', error);
        throw error;
    }
}

// ================================
// FUN√á√ïES PARA ENCONTROS (AGENDA)
// ================================

// Fun√ß√£o para buscar todos os agendamentos
async function pegarAgendamentos(){
    try {
        const endpoint = buildApiUrl(API_CONFIG.ENDPOINTS.AGENDA);
        console.log('üîÑ Fazendo requisi√ß√£o para agendamentos:', endpoint);
        
        const response = await fetch(endpoint, {
            method: 'GET',
            headers: API_CONFIG.DEFAULT_HEADERS,
            mode: 'cors'
        });

        if (!response.ok) {
            throw new Error(`‚ùå Erro HTTP: ${response.status} - ${response.statusText}`);
        }

        const agendamentos = await response.json();
        console.log('‚úÖ Agendamentos carregados com sucesso:', agendamentos.length, 'agendamentos encontrados');
        return agendamentos;
    } catch (error) {
        console.error('üí• Erro ao buscar agendamentos:', error);
        throw error;
    }
}

// Fun√ß√£o para buscar encontros ativos de hoje
async function pegarEncontrosAtivosHoje(){
    try {
        const endpoint = buildApiUrl(API_CONFIG.ENDPOINTS.AGENDA + '/hoje/ativos');
        console.log('üîÑ Fazendo requisi√ß√£o para encontros ativos de hoje:', endpoint);
        
        const response = await fetch(endpoint, {
            method: 'GET',
            headers: API_CONFIG.DEFAULT_HEADERS,
            mode: 'cors'
        });

        if (!response.ok) {
            throw new Error(`‚ùå Erro HTTP: ${response.status} - ${response.statusText}`);
        }

        const encontrosHoje = await response.json();
        console.log('‚úÖ Encontros ativos de hoje carregados:', encontrosHoje.length, 'encontros encontrados');
        return encontrosHoje;
    } catch (error) {
        console.error('üí• Erro ao buscar encontros ativos de hoje:', error);
        throw error;
    }
}

// Fun√ß√£o para contar encontros ativos de hoje (otimizada para dashboard)
async function contarEncontrosAtivosHoje(){
    try {
        const endpoint = buildApiUrl(API_CONFIG.ENDPOINTS.AGENDA + '/hoje/ativos/count');
        console.log('üîÑ Fazendo requisi√ß√£o para contar encontros ativos de hoje:', endpoint);
        
        const response = await fetch(endpoint, {
            method: 'GET',
            headers: API_CONFIG.DEFAULT_HEADERS,
            mode: 'cors'
        });

        if (!response.ok) {
            throw new Error(`‚ùå Erro HTTP: ${response.status} - ${response.statusText}`);
        }

        const count = await response.json();
        console.log('‚úÖ Contagem de encontros ativos de hoje:', count);
        return count;
    } catch (error) {
        console.error('üí• Erro ao contar encontros ativos de hoje:', error);
        throw error;
    }
}

// ========== PROCEDIMENTOS ==========

// Fun√ß√£o para buscar todos os procedimentos
async function pegarProcedimentos(){
    try {
        const endpoint = buildApiUrl(API_CONFIG.ENDPOINTS.PROCEDIMENTOS);
        console.log('üîÑ Fazendo requisi√ß√£o para procedimentos:', endpoint);
        
        const response = await fetch(endpoint, {
            method: 'GET',
            headers: API_CONFIG.DEFAULT_HEADERS,
            mode: 'cors'
        });

        if (!response.ok) {
            if (response.status === 401) {
                throw new Error('‚ùå Erro 401: N√£o autorizado.');
            } else if (response.status === 404) {
                throw new Error('‚ùå Erro 404: Endpoint n√£o encontrado.');
            } else {
                throw new Error(`‚ùå Erro HTTP: ${response.status} - ${response.statusText}`);
            }
        }

        const procedimentos = await response.json();
        console.log('‚úÖ Procedimentos carregados com sucesso:', procedimentos.length, 'procedimentos encontrados');
        return procedimentos;
    } catch (error) {
        if (error.name === 'TypeError' && error.message.includes('fetch')) {
            console.error('üåê Erro de conex√£o: Servidor Spring Boot pode estar offline');
            throw new Error('‚ùå Erro de conex√£o: Verifique se o servidor Spring Boot est√° rodando na porta 8080');
        }
        
        console.error('üí• Erro ao buscar procedimentos:', error);
        throw error;
    }
}

// Fun√ß√£o para contar total de procedimentos dispon√≠veis
async function contarProcedimentos(){
    try {
        const endpoint = buildApiUrl(API_CONFIG.ENDPOINTS.PROCEDIMENTOS + '/count');
        console.log('üîÑ Fazendo requisi√ß√£o para contar procedimentos:', endpoint);
        
        const response = await fetch(endpoint, {
            method: 'GET',
            headers: API_CONFIG.DEFAULT_HEADERS,
            mode: 'cors'
        });

        if (!response.ok) {
            throw new Error(`‚ùå Erro HTTP: ${response.status} - ${response.statusText}`);
        }

        const count = await response.json();
        console.log('‚úÖ Contagem de procedimentos dispon√≠veis:', count);
        return count;
    } catch (error) {
        console.error('üí• Erro ao contar procedimentos:', error);
        throw error;
    }
}

// ========== PRONTU√ÅRIOS (HIST√ìRICO) ==========

// Fun√ß√£o para buscar todos os prontu√°rios
async function pegarProntuarios(){
    try {
        const endpoint = buildApiUrl(API_CONFIG.ENDPOINTS.PRONTUARIOS);
        console.log('üîÑ Fazendo requisi√ß√£o para prontu√°rios:', endpoint);
        
        const response = await fetch(endpoint, {
            method: 'GET',
            headers: API_CONFIG.DEFAULT_HEADERS,
            mode: 'cors'
        });

        if (!response.ok) {
            if (response.status === 401) {
                throw new Error('‚ùå Erro 401: N√£o autorizado.');
            } else if (response.status === 404) {
                throw new Error('‚ùå Erro 404: Endpoint n√£o encontrado.');
            } else {
                throw new Error(`‚ùå Erro HTTP: ${response.status} - ${response.statusText}`);
            }
        }

        const prontuarios = await response.json();
        console.log('‚úÖ Prontu√°rios carregados com sucesso:', prontuarios.length, 'prontu√°rios encontrados');
        return prontuarios;
    } catch (error) {
        if (error.name === 'TypeError' && error.message.includes('fetch')) {
            console.error('üåê Erro de conex√£o: Servidor Spring Boot pode estar offline');
            throw new Error('‚ùå Erro de conex√£o: Verifique se o servidor Spring Boot est√° rodando na porta 8080');
        }
        
        console.error('üí• Erro ao buscar prontu√°rios:', error);
        throw error;
    }
}

// Fun√ß√£o para contar total de prontu√°rios (hist√≥rico completo)
async function contarProntuarios(){
    try {
        const endpoint = buildApiUrl(API_CONFIG.ENDPOINTS.PRONTUARIOS + '/count');
        console.log('üîÑ Fazendo requisi√ß√£o para contar prontu√°rios (hist√≥rico):', endpoint);
        
        const response = await fetch(endpoint, {
            method: 'GET',
            headers: API_CONFIG.DEFAULT_HEADERS,
            mode: 'cors'
        });

        if (!response.ok) {
            throw new Error(`‚ùå Erro HTTP: ${response.status} - ${response.statusText}`);
        }

        const count = await response.json();
        console.log('‚úÖ Contagem total de prontu√°rios (hist√≥rico):', count);
        return count;
    } catch (error) {
        console.error('üí• Erro ao contar prontu√°rios:', error);
        throw error;
    }
}

// Fun√ß√£o para contar prontu√°rios criados hoje
async function contarProntuariosHoje(){
    try {
        const endpoint = buildApiUrl(API_CONFIG.ENDPOINTS.PRONTUARIOS + '/count/hoje');
        console.log('üîÑ Fazendo requisi√ß√£o para contar prontu√°rios de hoje:', endpoint);
        
        const response = await fetch(endpoint, {
            method: 'GET',
            headers: API_CONFIG.DEFAULT_HEADERS,
            mode: 'cors'
        });

        if (!response.ok) {
            throw new Error(`‚ùå Erro HTTP: ${response.status} - ${response.statusText}`);
        }

        const count = await response.json();
        console.log('‚úÖ Contagem de prontu√°rios criados hoje:', count);
        return count;
    } catch (error) {
        console.error('üí• Erro ao contar prontu√°rios de hoje:', error);
        throw error;
    }
}

// Fun√ß√£o para buscar √∫ltimos prontu√°rios criados
async function pegarUltimosProntuarios(limite = 10){
    try {
        const endpoint = buildApiUrl(API_CONFIG.ENDPOINTS.PRONTUARIOS + `/ultimos?limite=${limite}`);
        console.log('üîÑ Fazendo requisi√ß√£o para √∫ltimos prontu√°rios:', endpoint);
        
        const response = await fetch(endpoint, {
            method: 'GET',
            headers: API_CONFIG.DEFAULT_HEADERS,
            mode: 'cors'
        });

        if (!response.ok) {
            throw new Error(`‚ùå Erro HTTP: ${response.status} - ${response.statusText}`);
        }

        const prontuarios = await response.json();
        console.log('‚úÖ √öltimos prontu√°rios carregados:', prontuarios.length, 'prontu√°rios');
        return prontuarios;
    } catch (error) {
        console.error('üí• Erro ao buscar √∫ltimos prontu√°rios:', error);
        throw error;
    }
}

// ==================== FUN√á√ïES DE EDI√á√ÉO E EXCLUS√ÉO ====================

/**
 * Cadastra um novo profissional
 */
async function cadastrarProfissional(dadosProfissional) {
    try {
        const endpoint = buildApiUrl(API_CONFIG.ENDPOINTS.PROFISSIONAIS);
        console.log('üìù Cadastrando novo profissional:', dadosProfissional);

        const response = await fetch(endpoint, {
            method: 'POST',
            headers: API_CONFIG.DEFAULT_HEADERS,
            mode: 'cors',
            body: JSON.stringify(dadosProfissional)
        });

        if (!response.ok) {
            throw new Error(`‚ùå Erro HTTP: ${response.status} - ${response.statusText}`);
        }

        const apiResponse = await response.json();
        if (apiResponse.success) {
            console.log('‚úÖ Profissional cadastrado com sucesso:', apiResponse.message);
            return apiResponse.data;
        } else {
            throw new Error(apiResponse.error || 'Erro ao cadastrar profissional');
        }
    } catch (error) {
        console.error('üí• Erro ao cadastrar profissional:', error);
        throw error;
    }
}

/**
 * Atualiza um profissional
 */
async function atualizarProfissional(id, dadosProfissional) {
    try {
        const endpoint = buildApiUrl(API_CONFIG.ENDPOINTS.PROFISSIONAIS + `/${id}`);
        console.log('üîÑ Atualizando profissional:', id, dadosProfissional);

        const response = await fetch(endpoint, {
            method: 'PUT',
            headers: API_CONFIG.DEFAULT_HEADERS,
            mode: 'cors',
            body: JSON.stringify(dadosProfissional)
        });

        if (!response.ok) {
            throw new Error(`‚ùå Erro HTTP: ${response.status} - ${response.statusText}`);
        }

        const apiResponse = await response.json();
        if (apiResponse.success) {
            console.log('‚úÖ Profissional atualizado com sucesso:', apiResponse.message);
            return apiResponse.data;
        } else {
            throw new Error(apiResponse.error || 'Erro ao atualizar profissional');
        }
    } catch (error) {
        console.error('üí• Erro ao atualizar profissional:', error);
        throw error;
    }
}

/**
 * Exclui (inativa) um profissional
 */
async function excluirProfissional(id) {
    try {
        const endpoint = buildApiUrl(API_CONFIG.ENDPOINTS.PROFISSIONAIS + `/${id}`);
        console.log('üóëÔ∏è Excluindo profissional:', id);

        const response = await fetch(endpoint, {
            method: 'DELETE',
            headers: API_CONFIG.DEFAULT_HEADERS,
            mode: 'cors'
        });

        if (!response.ok) {
            throw new Error(`‚ùå Erro HTTP: ${response.status} - ${response.statusText}`);
        }

        const apiResponse = await response.json();
        if (apiResponse.success) {
            console.log('‚úÖ Profissional exclu√≠do com sucesso:', apiResponse.message);
            return apiResponse.data;
        } else {
            throw new Error(apiResponse.error || 'Erro ao excluir profissional');
        }
    } catch (error) {
        console.error('üí• Erro ao excluir profissional:', error);
        throw error;
    }
}

/**
 * Cadastra um novo paciente
 */
async function cadastrarPaciente(dadosPaciente) {
    try {
        const endpoint = buildApiUrl(API_CONFIG.ENDPOINTS.PACIENTES);
        console.log('üìù Cadastrando novo paciente:', dadosPaciente);

        const response = await fetch(endpoint, {
            method: 'POST',
            headers: API_CONFIG.DEFAULT_HEADERS,
            mode: 'cors',
            body: JSON.stringify(dadosPaciente)
        });

        if (!response.ok) {
            throw new Error(`‚ùå Erro HTTP: ${response.status} - ${response.statusText}`);
        }

        const apiResponse = await response.json();
        if (apiResponse.success) {
            console.log('‚úÖ Paciente cadastrado com sucesso:', apiResponse.message);
            return apiResponse.data;
        } else {
            throw new Error(apiResponse.error || 'Erro ao cadastrar paciente');
        }
    } catch (error) {
        console.error('üí• Erro ao cadastrar paciente:', error);
        throw error;
    }
}

/**
 * Atualiza um paciente
 */
async function atualizarPaciente(id, dadosPaciente) {
    try {
        const endpoint = buildApiUrl(API_CONFIG.ENDPOINTS.PACIENTES + `/${id}`);
        console.log('üîÑ Atualizando paciente:', id, dadosPaciente);

        const response = await fetch(endpoint, {
            method: 'PUT',
            headers: API_CONFIG.DEFAULT_HEADERS,
            mode: 'cors',
            body: JSON.stringify(dadosPaciente)
        });

        if (!response.ok) {
            throw new Error(`‚ùå Erro HTTP: ${response.status} - ${response.statusText}`);
        }

        const apiResponse = await response.json();
        if (apiResponse.success) {
            console.log('‚úÖ Paciente atualizado com sucesso:', apiResponse.message);
            return apiResponse.data;
        } else {
            throw new Error(apiResponse.error || 'Erro ao atualizar paciente');
        }
    } catch (error) {
        console.error('üí• Erro ao atualizar paciente:', error);
        throw error;
    }
}

/**
 * Exclui (inativa) um paciente
 */
async function excluirPaciente(id) {
    try {
        const endpoint = buildApiUrl(API_CONFIG.ENDPOINTS.PACIENTES + `/${id}`);
        console.log('üóëÔ∏è Excluindo paciente:', id);

        const response = await fetch(endpoint, {
            method: 'DELETE',
            headers: API_CONFIG.DEFAULT_HEADERS,
            mode: 'cors'
        });

        if (!response.ok) {
            throw new Error(`‚ùå Erro HTTP: ${response.status} - ${response.statusText}`);
        }

        const apiResponse = await response.json();
        if (apiResponse.success) {
            console.log('‚úÖ Paciente exclu√≠do com sucesso:', apiResponse.message);
            return true;
        } else {
            throw new Error(apiResponse.error || 'Erro ao excluir paciente');
        }
    } catch (error) {
        console.error('üí• Erro ao excluir paciente:', error);
        throw error;
    }
}

/**
 * Cadastra uma nova anamnese
 */
async function cadastrarAnamnese(dadosAnamnese) {
    try {
        console.log('üîÑ Cadastrando anamnese:', dadosAnamnese);
        
        const anamneseEndpoint = buildApiUrl(API_CONFIG.ENDPOINTS.ANAMNESES);
        
        const response = await fetch(anamneseEndpoint, {
            method: 'POST',
            headers: {
                ...API_CONFIG.DEFAULT_HEADERS,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(dadosAnamnese),
            mode: 'cors'
        });

        console.log('üì° Resposta do cadastro de anamnese:', {
            status: response.status,
            statusText: response.statusText
        });

        if (!response.ok) {
            if (response.status === 400) {
                const errorData = await response.json();
                throw new Error(`‚ùå Dados inv√°lidos: ${errorData.message || 'Verifique os campos preenchidos'}`);
            } else if (response.status === 409) {
                throw new Error('‚ùå Conflito: Anamnese j√° existe para este paciente');
            } else if (response.status >= 500) {
                throw new Error(`‚ùå Erro do servidor (${response.status}): ${response.statusText}`);
            } else {
                throw new Error(`‚ùå Erro HTTP: ${response.status} - ${response.statusText}`);
            }
        }

        const apiResponse = await response.json();
        console.log('‚úÖ Anamnese cadastrada com sucesso:', apiResponse);
        
        return apiResponse;
        
    } catch (error) {
        console.error('‚ùå Erro ao cadastrar anamnese:', error);
        throw error;
    }
}

// ==========================================
// MONITORAMENTO DE CONEX√ïES DO BANCO
// ==========================================

/**
 * Obt√©m o status atual das conex√µes do banco de dados
 */
async function obterStatusConexoes() {
    try {
        const endpoint = buildApiUrl('/database/status');
        console.log('üîç Verificando status das conex√µes:', endpoint);
        
        const response = await fetch(endpoint, {
            method: 'GET',
            headers: API_CONFIG.DEFAULT_HEADERS
        });

        if (!response.ok) {
            throw new Error(`Erro ${response.status}: ${response.statusText}`);
        }

        const data = await response.json();
        console.log('üìä Status das conex√µes obtido:', data);
        return data;
    } catch (error) {
        console.error('‚ùå Erro ao obter status das conex√µes:', error);
        throw new Error(`Falha ao verificar status das conex√µes: ${error.message}`);
    }
}

/**
 * Executa limpeza manual das conex√µes ociosas
 */
async function executarLimpezaConexoes() {
    try {
        const endpoint = buildApiUrl('/database/cleanup');
        console.log('üßπ Executando limpeza de conex√µes:', endpoint);
        
        const response = await fetch(endpoint, {
            method: 'GET',
            headers: API_CONFIG.DEFAULT_HEADERS
        });

        if (!response.ok) {
            throw new Error(`Erro ${response.status}: ${response.statusText}`);
        }

        const data = await response.json();
        console.log('‚úÖ Limpeza de conex√µes executada:', data);
        return data;
    } catch (error) {
        console.error('‚ùå Erro na limpeza de conex√µes:', error);
        throw new Error(`Falha na limpeza de conex√µes: ${error.message}`);
    }
}

/**
 * Executa limpeza de emerg√™ncia das conex√µes (mais agressiva)
 */
async function executarLimpezaEmergencia() {
    try {
        const endpoint = buildApiUrl('/database/emergency-cleanup');
        console.log('üö® Executando limpeza de emerg√™ncia:', endpoint);
        
        const response = await fetch(endpoint, {
            method: 'POST',
            headers: API_CONFIG.DEFAULT_HEADERS
        });

        if (!response.ok) {
            throw new Error(`Erro ${response.status}: ${response.statusText}`);
        }

        const data = await response.json();
        console.log('‚ö†Ô∏è Limpeza de emerg√™ncia executada:', data);
        return data;
    } catch (error) {
        console.error('‚ùå Erro na limpeza de emerg√™ncia:', error);
        throw new Error(`Falha na limpeza de emerg√™ncia: ${error.message}`);
    }
}

// Fun√ß√£o para buscar um paciente por ID
async function buscarPacientePorId(id) {
    try {
        const endpoint = buildApiUrl(API_CONFIG.ENDPOINTS.PACIENTES + `/${id}`);
        console.log('üîç Buscando paciente por ID:', id);

        const response = await fetch(endpoint, {
            method: 'GET',
            headers: API_CONFIG.DEFAULT_HEADERS,
            mode: 'cors'
        });

        if (!response.ok) {
            if (response.status === 404) {
                throw new Error('‚ùå Paciente n√£o encontrado');
            }
            throw new Error(`‚ùå Erro HTTP: ${response.status} - ${response.statusText}`);
        }

        const apiResponse = await response.json();
        if (apiResponse.success) {
            console.log('‚úÖ Paciente encontrado:', apiResponse.data);
            return apiResponse.data;
        } else {
            throw new Error(apiResponse.error || 'Erro ao buscar paciente');
        }
    } catch (error) {
        console.error('üí• Erro ao buscar paciente por ID:', error);
        throw error;
    }
}

/**
 * Busca um profissional por ID
 */
async function buscarProfissionalPorId(id) {
    try {
        const endpoint = buildApiUrl(API_CONFIG.ENDPOINTS.PROFISSIONAIS + `/${id}`);
        console.log('üîç Buscando profissional por ID:', id);

        const response = await fetch(endpoint, {
            method: 'GET',
            headers: API_CONFIG.DEFAULT_HEADERS,
            mode: 'cors'
        });

        if (!response.ok) {
            if (response.status === 404) {
                throw new Error('‚ùå Profissional n√£o encontrado');
            }
            throw new Error(`‚ùå Erro HTTP: ${response.status} - ${response.statusText}`);
        }

        const apiResponse = await response.json();
        if (apiResponse.success) {
            console.log('‚úÖ Profissional encontrado:', apiResponse.data);
            return apiResponse.data;
        } else {
            throw new Error(apiResponse.error || 'Erro ao buscar profissional');
        }
    } catch (error) {
        console.error('üí• Erro ao buscar profissional por ID:', error);
        throw error;
    }
}

/**
 * Solicita exclus√£o de um registro (funcionalidade gen√©rica)
 */
async function solicitarExclusao(tipo, id) {
    try {
        console.log(`üóëÔ∏è Solicitando exclus√£o de ${tipo} com ID:`, id);
        
        // Determinar o endpoint baseado no tipo
        let endpoint;
        switch (tipo.toLowerCase()) {
            case 'paciente':
                endpoint = buildApiUrl(API_CONFIG.ENDPOINTS.PACIENTES + `/${id}`);
                break;
            case 'profissional':
                endpoint = buildApiUrl(API_CONFIG.ENDPOINTS.PROFISSIONAIS + `/${id}`);
                break;
            case 'anamnese':
                endpoint = buildApiUrl(API_CONFIG.ENDPOINTS.ANAMNESES + `/${id}`);
                break;
            default:
                throw new Error(`‚ùå Tipo de exclus√£o n√£o suportado: ${tipo}`);
        }

        const response = await fetch(endpoint, {
            method: 'DELETE',
            headers: API_CONFIG.DEFAULT_HEADERS,
            mode: 'cors'
        });

        if (!response.ok) {
            throw new Error(`‚ùå Erro HTTP: ${response.status} - ${response.statusText}`);
        }

        const apiResponse = await response.json();
        if (apiResponse.success) {
            console.log(`‚úÖ ${tipo} exclu√≠do com sucesso:`, apiResponse.message);
            return true;
        } else {
            throw new Error(apiResponse.error || `Erro ao excluir ${tipo}`);
        }
    } catch (error) {
        console.error(`üí• Erro ao excluir ${tipo}:`, error);
        throw error;
    }
}

// Exportando as fun√ß√µes para serem usadas em outros m√≥dulos
export { 
    pegarPacientes, 
    pegarPacientesAtivos, 
    contarPacientesAtivos,
    pegarProfissionais,
    pegarProfissionaisAtivos,
    contarProfissionaisAtivos,
    pegarAnamneses,
    pegarAnamnesesAtivas,
    contarAnamnesesAtivas,
    pegarAgendamentos,
    pegarEncontrosAtivosHoje,
    contarEncontrosAtivosHoje,
    pegarProcedimentos,
    contarProcedimentos,
    pegarProntuarios,
    contarProntuarios,
    contarProntuariosHoje,
    pegarUltimosProntuarios,
    cadastrarProfissional,
    atualizarProfissional,
    excluirProfissional,
    cadastrarPaciente,
    cadastrarAnamnese,
    atualizarPaciente,
    excluirPaciente,
    buscarProfissionalPorId,
    buscarPacientePorId,
    solicitarExclusao,
    obterStatusConexoes,
    executarLimpezaConexoes,
    executarLimpezaEmergencia
};